<style>
    .add-product-container {
        display: flex;
        flex-direction: column;
        justify-content: center;
        align-content: center;
        min-height: 100vh;
    }

    #product-image-preview {
        display: flex;
        flex-direction: row;
        justify-content: space-evenly;
        flex-wrap: wrap;
        width: 90%;
        margin: 1rem auto;
    }

    .product-image-box {
        display: flex;
        flex-direction: column;
        border: 1px solid #c5c5c5;
        border-radius: 10px;
        overflow: hidden;
    }

    .preview-img {
        width: 200px;
        height: 200px;
        object-fit: scale-down;
    }

    .delete-button {
        background-color: #c30606;
        padding: 10px;
        color: #ffffff;
        font-weight: 600;
        border: none;
        outline: none;
    }

    #product-description {
        resize: vertical;
        min-height: 200px;
    }

    .image-container {
        height: 300px;
        width: 250px;
        overflow: hidden;
    }

    .image-preview {
        width: 250px;
        height: 250px;
        object-fit: contain;
    }


    #imageContainer {
        display: flex;
        flex-direction: row;
        align-items: center;
        justify-content: space-around;
        flex-wrap: wrap;
        gap: 2rem;
    }

    /* .image-crop-div {
        width: 100%;
        height: 100%;
    }

    .cropper-container{
        width: 500px;
        height: 500px;
        background-color: red;
    }
    .cropper-crop{
        width: 300px;
        height: 300px;
    } */
    .modal-content {
        /* Ensure the modal content fills the modal dialog */
        width: 100%;
        height: auto;
        max-width: 100%;
        max-height: 100%;
        margin: 0;
    }

    .image-crop-div {
        /* Ensure the image within the crop div fills its container */
        width: 100%;
        height: 100%;
        display: flex;
        justify-content: center;
        align-items: center;
    }

    #modalImage {
        /* Make the image inside modal fill its container */
        max-width: 100%;
        max-height: 100%;
        width: auto;
        height: auto;
        margin: auto;
    }
</style>

<%- include('navbar') %>

    <div class="add-product-container container my-4">
        <div class="product-header mb-3">
            <h2 class="text-center">Add Product</h2>
        </div>
        <form action="/admin/add-product" method="post" enctype="multipart/form-data" id="add-product-form">
            <div class="row">
                <div class="col-lg-6 mt-3 ">
                    <div class="mb-3">
                        <label for="productName" class="form-label">Product Name</label>
                        <input type="text" class="form-control" id="productName" name="productName" maxlength="100">
                        <div class="validateLabel text-danger"></div>
                    </div>

                    <div class="mb-3">
                        <label for="productPrice" class="form-label">Product Price</label>
                        <input type="number" class="form-control" id="productPrice" name="productPrice" max="100000">
                        <div class="validateLabel text-danger"></div>
                    </div>

                    <div class="mb-3">
                        <label for="productQuantity" class="form-label">Product Quantity</label>
                        <input type="number" class="form-control" id="productQuantity" name="productQuantity"
                            max="100000">
                        <div class="validateLabel text-danger"></div>
                    </div>

                    <div class="mb-3">
                        <label for="productDiscount" class="form-label">Product Discount in percentage</label>
                        <input type="number" class="form-control" id="productDiscount" name="productDiscount" max="100">
                        <div class="validateLabel text-danger"></div>
                    </div>

                    <div class="mb-3">
                        <label for="productCategory" class="form-label">Product Category</label>
                        <select class="form-select" id="product-category" name="productCategory">
                            <option value="" selected disabled>Select a category</option>
                            <% productCategory.forEach((category)=> { %>
                                <option value="<%= category.categoryName %>">
                                    <%= category.categoryName %>
                                </option>
                                <% }) %>
                        </select>
                        <div class="validateLabel text-danger"></div>
                    </div>
                </div>

                <div class="col-lg-6 mt-3">
                    <div class="mb-3">
                        <label for="productBrand" class="form-label">Product Brand</label>
                        <input type="text" class="form-control" id="productBrand" name="productBrand" maxlength="30">
                        <div class="validateLabel text-danger"></div>
                    </div>

                    <div class="mb-3">
                        <label for="productDescription" class="form-label">Product Description</label>
                        <textarea class="form-control" id="product-description" name="productDescription"
                            maxlength="500"></textarea>
                        <div class="validateLabel text-danger"></div>
                    </div>
                </div>
            </div>

            <div class="text-center mt-4">
                <input type="file" id="product-image-upload" name="productImage" accept="image/png, image/jpeg" multiple
                    class="d-none">
                <label for="product-image-upload" class="btn btn-warning ">
                    <i class="fas fa-upload"></i> &nbsp; Choose Images
                </label>
                <div class="container mt-4">
                    <div id="imageContainer">
                    </div>
                </div>
            </div>

            <div class="text-center mt-4">
                <a href="/admin/products" class="btn btn-secondary">Cancel</a>
                <button class="btn btn-success" type="submit">Add Product</button>
            </div>
        </form>
    </div>


    <%- include('footer') %>

        <div class="modal fade" id="imageModal" tabindex="-1" aria-labelledby="imageModalLabel" aria-hidden="true">
            <div class="modal-dialog modal-dialog-centered" role="document">
                <div class="modal-content">
                    <div class="modal-header">
                        <h5 class="modal-title" id="imageModalLabel">Crop Image</h5>
                        <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                    </div>
                    <div class="modal-body">
                        <div class="image-crop-div">
                            <img id="modalImage" class="img-fluid" src="" alt="Image preview">
                        </div>
                    </div>
                    <div class="modal-footer">
                        <button class="btn btn-dark text-center" id="cropButton">Save Cropped Image</button>
                    </div>
                </div>
            </div>
        </div>



        <script>

            const addProductForm = document.getElementById('add-product-form')
            const productName = document.getElementsByName('productName')[0];
            const productPrice = document.getElementsByName('productPrice')[0];
            const productQuantity = document.getElementsByName('productQuantity')[0];
            const productBrand = document.getElementsByName('productBrand')[0];
            const productDiscount = document.getElementsByName('productDiscount')[0];
            const productDescription = document.getElementsByName('productDescription')[0];
            const productCategory = document.getElementsByName('productCategory')[0];
            const validateDiv = document.querySelectorAll('.validateLabel')




            // validation for adding new product
            addProductForm.addEventListener('submit', (e) => {
                e.preventDefault()

                validateDiv.forEach((div) => {
                    div.innerHTML = ""
                })


                let isValid = true

                if (document.getElementById('product-image-upload').value === '') {
                    isValid = false;
                    Swal.fire({
                        title: "Invalid Inputs",
                        text: "Product image should not be empty",
                        icon: "error",
                        showConfirmButton: false,
                        timer: 800
                    })
                }
                if (productName.value.trim() === "" || productName.value.length < 3 || !isNaN(productName.value)) {
                    document.getElementsByClassName('validateLabel')[0].innerHTML = "Please provide a valid product name (min 3 characters).";
                    isValid = false;
                }

                if (isNaN(productPrice.value) || parseFloat(productPrice.value) <= 0 || productPrice.value.length < 1) {
                    document.getElementsByClassName('validateLabel')[1].innerHTML = "Please provide a valid price (between 1 and 100000).";
                    isValid = false;
                }

                if (isNaN(productQuantity.value) || parseInt(productQuantity.value) <= 0 || productQuantity.value.length < 1) {
                    document.getElementsByClassName('validateLabel')[2].innerHTML = "Please provide a valid quantity (between 1 and 100000).";
                    isValid = false;
                }

                if (isNaN(productDiscount.value) || parseInt(productDiscount.value) < 0 || parseInt(productDiscount.value) > 100 || productDiscount.value.length === 0) {
                    document.getElementsByClassName('validateLabel')[3].innerHTML = "Please provide a valid discount (between 0 and 100).";
                    isValid = false;
                }
                if (productCategory.value === null || productCategory.value === "") {
                    document.getElementsByClassName('validateLabel')[4].innerHTML = "Please select a category.";
                    isValid = false
                }


                if (productBrand.value.trim() === '' || productBrand.value.length <= 0 || !isNaN(productBrand.value)) {
                    document.getElementsByClassName('validateLabel')[5].innerHTML = "Please provide a valid brand (min 3 characters).";
                    isValid = false
                }

                if (productDescription.value.length <= 10 || productDescription.value.length > 500 || productDescription.value.trim === "") {
                    document.getElementsByClassName('validateLabel')[6].innerHTML = "Please provide a valid description (min 10 characters).";
                    isValid = false
                }

                if (isValid) {
                    addProductForm.submit()
                }
            })

            const inputImage = document.getElementById('product-image-upload');
            const imageContainer = document.getElementById('imageContainer');
            let cropper;

            inputImage.addEventListener('change', (event) => {
                const files = event.target.files;

                // Check if the number of files exceeds the limit
                if (files.length > 4 || imageContainer.children.length + files.length > 4) {
                    Swal.fire({
                        icon: "error",
                        title: "File limit reached",
                        text: "Maximum four files can be uploaded",
                        timer: 12000,
                    });
                    return;
                }

                for (const file of files) {
                    const reader = new FileReader();
                    reader.onload = (e) => {
                        const colDiv = document.createElement('div');
                        colDiv.classList.add('col-md-3', 'mb-3', 'image-container');

                        const img = document.createElement('img');
                        img.src = e.target.result;
                        img.classList.add('img-fluid', 'img-thumbnail', 'image-preview');

                        const openModalButton = document.createElement('button');
                        openModalButton.classList.add('btn', 'btn-primary', 'mt-2', 'me-2');
                        openModalButton.innerText = 'Crop';
                        openModalButton.setAttribute('type', 'button');
                        openModalButton.setAttribute('data-bs-toggle', 'modal');
                        openModalButton.setAttribute('data-bs-target', '#imageModal');
                        openModalButton.addEventListener('click', () => {
                            document.getElementById('modalImage').src = e.target.result;
                            cropper = new Cropper(document.getElementById('modalImage'), {
                                aspectRatio: 1,
                                viewMode: 0,
                                autoCropArea: 1,
                            });

                            document.getElementById('cropButton').onclick = () => {
                                const canvas = cropper.getCroppedCanvas();
                                const croppedImage = canvas.toDataURL('image/png');

                                img.src = croppedImage;

                                // Store cropped image data in a hidden input field
                                const hiddenInput = document.createElement('input');
                                hiddenInput.type = 'hidden';
                                hiddenInput.name = 'croppedImages[]'; // Use an array if multiple images
                                hiddenInput.value = croppedImage;
                                imageContainer.appendChild(hiddenInput);

                                cropper.destroy();
                                cropper = null;
                                document.getElementById('imageModal').querySelector('.btn-close').click();
                            };
                        });

                        const deleteButton = document.createElement('button');
                        deleteButton.classList.add('btn', 'btn-danger', 'mt-2', 'ms-2');
                        deleteButton.innerText = 'Delete';
                        deleteButton.addEventListener('click', () => {
                            imageContainer.removeChild(colDiv);
                        });

                        colDiv.appendChild(img);
                        colDiv.appendChild(openModalButton);
                        colDiv.appendChild(deleteButton);
                        imageContainer.appendChild(colDiv);
                    }
                    reader.readAsDataURL(file);
                }
            });

            const imageModal = document.getElementById('imageModal');
            imageModal.addEventListener('hidden.bs.modal', function () {
                if (cropper) {
                    cropper.destroy();
                    cropper = null;
                }
            });




            // const inputImage = document.getElementById('product-image-upload');
            // const imageContainer = document.getElementById('imageContainer');
            // inputImage.addEventListener('change', (event) => {
            //     const files = event.target.files;

            //     // append new files to the image array
            //     // imageContainer.innerHTML = '';

            //     // Check if the number of files exceeds the limit
            //     if (files.length > 4 || imageContainer.children.length + files.length > 4) {
            //         Swal.fire({
            //             icon: "error",
            //             title: "File limit reached",
            //             text: "Maximum four files can be uploaded",
            //             timer: 12000,
            //         });
            //         // imageContainer.innerHTML = '';
            //         return; // Stop further execution if the limit is exceeded
            //     }

            //     for (const file of files) {
            //         const reader = new FileReader();
            //         reader.onload = (e) => {

            //             // each image container
            //             const colDiv = document.createElement('div');
            //             colDiv.classList.add('col-md-3', 'mb-3', 'image-container');

            //             // image
            //             const img = document.createElement('img');
            //             img.src = e.target.result;
            //             img.classList.add('img-fluid', 'img-thumbnail', 'image-preview');

            //             // Create buttons
            //             const openModalButton = document.createElement('button');
            //             openModalButton.classList.add('btn', 'btn-primary', 'mt-2','me-2');
            //             openModalButton.innerText = 'Crop';
            //             openModalButton.setAttribute('data-bs-toggle', 'modal');
            //             openModalButton.setAttribute('data-bs-target', '#imageModal');
            //             openModalButton.addEventListener('click', () => {
            //                 document.getElementById('modalImage').src = e.target.result;
            //             });

            //             const deleteButton = document.createElement('button');
            //             deleteButton.classList.add('btn', 'btn-danger', 'mt-2', 'ml-2','ms-2');
            //             deleteButton.innerText = 'Delete';
            //             deleteButton.addEventListener('click', () => {
            //                 imageContainer.removeChild(colDiv);
            //             });

            //             colDiv.appendChild(img);
            //             colDiv.appendChild(openModalButton);
            //             colDiv.appendChild(deleteButton);
            //             imageContainer.appendChild(colDiv);
            //         }
            //         reader.readAsDataURL(file);
            //     }
            // });


            // image cropper
            // inputImage.addEventListener('change', (event) => {
            //     const files = event.target.files;
            //     const imageContainer = document.getElementById('imageContainer')

            //     // clear previous images if any

            //     Array.from(files).forEach((file, index) => {
            //         const render = new FileReader()
            //         render.onload = function (e) {
            //             // create container div
            //             const containerDiv = document.createElement('div');
            //             containerDiv.classList.add ('image-container','col-md-4')

            //             // create image element
            //             const img = document.createElement('img');
            //             img.src = e.target.result;
            //             img.classList.add ("cropper-container")
            //             img.id = `image-${index}`

            //             // create canvas element
            //             const canvas = document.createElement('canvas');
            //             canvas.className="cropCanvas"
            //             canvas.id = `canvas-${index}`

            //             // create crop button
            //             const cropButton = document.createElement('button');
            //             cropButton.innerText = "Crop Image";
            //             cropButton.dataset.imageId = `image-${index}`
            //             cropButton.dataset.canvasId = `canvas-${index}`

            //             // append elements to the container div
            //             containerDiv.appendChild(img);
            //             containerDiv.appendChild(cropButton);
            //             containerDiv.appendChild(document.createElement('br'));
            //             containerDiv.appendChild(canvas);


            //             // append containerDiv to the main image container
            //             imageContainer.appendChild(containerDiv);

            //             // initialize cropper.js for the image
            //             const cropper = new Cropper(img, {
            //                 aspectRatio: 1,
            //                 viewMode: 0,
            //             });

            //             // handle crop button click
            //             cropButton.addEventListener('click', function () {
            //                 const imgId = this.dataset.imageId;
            //                 const canvasId = this.dataset.canvasId;
            //                 const cropperInstance = Cropper.instances[imgId];

            //                 if (!cropperInstance) {
            //                     Swal.fire({
            //                         icon: "info",
            //                         title: "Please upload an image first",
            //                         showConfirmButton: false,
            //                         timer: 10000
            //                     }).then(() => {
            //                         return
            //                     })
            //                 }

            //                 // get the cropped canvas from cropper.js

            //                 const croppedCanvas = cropperInstance.getCroppedCanvas();

            //                 // dsiplay the cropped image on the corresponding canvas
            //                 const displayCanvas = document.getElementById(canvasId)
            //                 const ctx = displayCanvas.getContext('2d')
            //                 displayCanvas.width = croppedCanvas.width;
            //                 displayCanvas.height = croppedCanvas.height;
            //                 ctx.drawImage(croppedCanvas, 0, 0)

            //             })
            //             // store cropped insatnce globally for later access
            //             if (!Cropper.instances) {
            //                 Cropper.instances = {};
            //             }
            //             Cropper.instances[img.id] = cropper;

            //         }
            //         render.readAsDataURL(file);
            //     })
            // })





            // const productImageUpload = document.getElementById('product-image-upload');
            // const productImagePreview = document.getElementById("product-image-preview");

            // productImageUpload.addEventListener('change', () => {
            //     // Clear previous previews
            //     productImagePreview.innerHTML = '';

            //     // if user select more than 4 images then show a sweet alert and make the preview empty
            //     if (productImageUpload.files.length > 4) {
            //         Swal.fire({
            //             icon: "error",
            //             title: "Oops...",
            //             text: "Maximum file count is 4",
            //         });
            //         //clear the preview images
            //         productImageUpload.value = '';
            //     } else if (productImageUpload.files.length === 0) {
            //         Swal.fire({
            //             icon: "error",
            //             title: "Oops...",
            //             text: "Minimum file count is 1",
            //         });
            //         //clear the preview images
            //         productImageUpload.value = '';

            //     } else {
            //         for (let i = 0; i < productImageUpload.files.length; i++) {
            //             let reader = new FileReader();
            //             let figure = document.createElement("div");
            //             figure.classList.add('product-image-box');

            //             reader.onload = () => {
            //                 let img = document.createElement("img");
            //                 img.classList.add("preview-img");
            //                 img.setAttribute("src", reader.result);
            //                 figure.appendChild(img);

            //                 // Create delete button with class delete-button
            //                 let deleteButton = document.createElement("button");
            //                 deleteButton.textContent = "Delete";
            //                 deleteButton.classList.add("delete-button");
            //                 deleteButton.addEventListener("click", () => {
            //                     // Remove the parent div (figure) when the delete button is clicked
            //                     figure.remove();
            //                 });
            //                 figure.appendChild(deleteButton);
            //             };

            //             productImagePreview.appendChild(figure);
            //             reader.readAsDataURL(productImageUpload.files[i]);
            //         }
            //     }
            // });


        </script>
        <!-- 
        <script>
            const imageUpload = document.getElementById('image-upload')
            const imageUploadPreview = document.getElementById('image-upload-preview')
            let cropper;
            let currentImage;
            const cropperModalElement = document.getElementById('cropperModal');
            const cropperModal = new bootstrap.Modal(document.getElementById('cropperModal'), {});


            imageUpload.addEventListener('change', () => {
                imageUploadPreview.innerHTML = "";

                if (imageUpload.files.length != 3) {
                    Swal.fire({
                        icon: 'error',
                        title: 'Oops',
                        text: 'Select three Images'
                    })

                    imageUpload.value = ''

                } else {

                    for (let i = 0; i < imageUpload.files.length; i++) {
                        let reader = new FileReader();
                        let figure = document.createElement('div')
                        figure.classList.add('image-preview-box')

                        reader.onload = () => {

                            let img = document.createElement('img')
                            img.classList.add("preview-img");
                            img.setAttribute("src", reader.result);
                            figure.appendChild(img);

                            // Create delete button with class delete-button
                            let deleteButton = document.createElement("button");
                            deleteButton.textContent = "Delete";
                            deleteButton.classList.add('btn', "submit-btn", 'delete-button');
                            deleteButton.addEventListener("click", () => {
                                // Remove the parent div (figure) when the delete button is clicked
                                figure.remove();
                                imageUpload.value = '';
                            });


                            figure.appendChild(deleteButton)
                            imageUploadPreview.appendChild(figure)

                            img.addEventListener("click", () => {
                                currentImage = img;
                                document.getElementById('image-to-crop').src = reader.result;
                                cropperModal.show();
                                cropperModalElement.addEventListener('shown.bs.modal', () => {
                                    if (cropper) cropper.destroy();
                                    const imageToCrop = document.getElementById('image-to-crop');
                                    cropper = new Cropper(imageToCrop, {
                                        aspectRatio: 0,
                                        viewMode: 0,
                                        autoCropArea: 0,
                                        responsive: true,
                                        background: false,
                                    });
                                }, { once: true });
                            });
                        };

                        reader.readAsDataURL(imageUpload.files[i]);
                    }
                }

            });

            // Crop button event listener
            document.getElementById('crop-button').addEventListener('click', () => {
                const canvas = cropper.getCroppedCanvas();
                currentImage.src = canvas.toDataURL();
                cropperModal.hide();
                cropper.destroy();
            });
        </script> -->