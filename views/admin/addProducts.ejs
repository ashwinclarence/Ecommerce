<style>
    .add-product-container {
        display: flex;
        flex-direction: column;
        justify-content: center;
        align-content: center;
        min-height: 100vh;
    }

    #product-image-preview {
        display: flex;
        flex-direction: row;
        justify-content: space-evenly;
        flex-wrap: wrap;
        width: 90%;
        margin: 1rem auto;
    }

    .product-image-box {
        display: flex;
        flex-direction: column;
        border: 1px solid #c5c5c5;
        border-radius: 10px;
        overflow: hidden;
    }

    .preview-img {
        width: 200px;
        height: 200px;
        object-fit: scale-down;
    }

    .delete-button {
        background-color: #c30606;
        padding: 10px;
        color: #ffffff;
        font-weight: 600;
        border: none;
        outline: none;
    }

    #product-description {
        resize: vertical;
        min-height: 200px;
    }

    .image-container {
        height: 300px;
        width: 250px;
        overflow: hidden;
    }

    .image-preview {
        width: 250px;
        height: 250px;
        object-fit: contain;
    }


    #imageContainer {
        display: flex;
        flex-direction: row;
        align-items: center;
        justify-content: space-around;
        flex-wrap: wrap;
        gap: 2rem;
    }

    
    .modal-content {
        margin: 0;
    }

    #modalImage {
            width: 100%;
        }
</style>

<%- include('navbar') %>

    <div class="add-product-container container my-4">
        <div class="product-header mb-3">
            <h2 class="text-center">Add Product</h2>
        </div>
        <form action="/admin/add-product" method="post" enctype="multipart/form-data" id="add-product-form">
            <div class="row">
                <div class="col-lg-6 mt-3 ">
                    <div class="mb-3">
                        <label for="productName" class="form-label">Product Name</label>
                        <input type="text" class="form-control" id="productName" name="productName" maxlength="100">
                        <div class="validateLabel text-danger"></div>
                    </div>

                    <div class="mb-3">
                        <label for="productPrice" class="form-label">Product Price</label>
                        <input type="number" class="form-control" id="productPrice" name="productPrice" max="100000">
                        <div class="validateLabel text-danger"></div>
                    </div>

                    <div class="mb-3">
                        <label for="productQuantity" class="form-label">Product Quantity</label>
                        <input type="number" class="form-control" id="productQuantity" name="productQuantity"
                            max="100000">
                        <div class="validateLabel text-danger"></div>
                    </div>

                    <!-- <div class="mb-3">
                        <label for="productDiscount" class="form-label">Product Discount in percentage</label>
                        <input type="number" class="form-control" id="productDiscount" name="productDiscount" max="100">
                        <div class="validateLabel text-danger"></div>
                    </div> -->

                    <div class="mb-3">
                        <label for="productCategory" class="form-label">Product Category</label>
                        <select class="form-select" id="product-category" name="productCategory">
                            <option value="" selected disabled>Select a category</option>
                            <% productCategory.forEach((category)=> { %>
                                <option value="<%= category.categoryName %>">
                                    <%= category.categoryName %>
                                </option>
                                <% }) %>
                        </select>
                        <div class="validateLabel text-danger"></div>
                    </div>
                </div>

                <div class="col-lg-6 mt-3">
                    <div class="mb-3">
                        <label for="productBrand" class="form-label">Product Brand</label>
                        <input type="text" class="form-control" id="productBrand" name="productBrand" maxlength="30">
                        <div class="validateLabel text-danger"></div>
                    </div>

                    <div class="mb-3">
                        <label for="productDescription" class="form-label">Product Description</label>
                        <textarea class="form-control" id="product-description" name="productDescription"
                            maxlength="500"></textarea>
                        <div class="validateLabel text-danger"></div>
                    </div>
                </div>
            </div>

            <!-- File upload and image preview section -->
            <div class="text-center mt-4">
                <input type="file" id="product-image-upload" name="productImage" accept="image/png, image/jpeg" multiple
                    class="d-none">
                <label for="product-image-upload" class="btn btn-warning">
                    <i class="fas fa-upload"></i> &nbsp; Choose Images
                </label>
                <div class="container mt-4">
                    <div id="imageContainer" class="row">
                        <!-- Image previews will be appended here -->
                    </div>
                </div>
            </div>


            <div class="text-center mt-4">
                <a href="/admin/products" class="btn btn-secondary">Cancel</a>
                <button class="btn btn-success" type="submit">Add Product</button>
            </div>
        </form>


    </div>


    <%- include('footer') %>


        <!-- Modal for cropping image -->
        <div class="modal fade" id="imageModal" tabindex="1" aria-labelledby="imageModalLabel" aria-hidden="true">
            <div class="modal-dialog">
                <div class="modal-content">
                    <div class="modal-header">
                        <h5 class="modal-title" id="imageModalLabel">Crop Image</h5>
                        <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                    </div>
                    <div class="modal-body">
                        <img id="modalImage" src="" class="img-fluid">
                    </div>
                    <div class="modal-footer">
                        <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
                        <button type="button" id="cropButton" class="btn btn-primary">Crop</button>
                    </div>
                </div>
            </div>
        </div>


        <script>

            const addProductForm = document.getElementById('add-product-form')
            const productName = document.getElementsByName('productName')[0];
            const productPrice = document.getElementsByName('productPrice')[0];
            const productQuantity = document.getElementsByName('productQuantity')[0];
            const productBrand = document.getElementsByName('productBrand')[0];
            const productDiscount = document.getElementsByName('productDiscount')[0];
            const productDescription = document.getElementsByName('productDescription')[0];
            const productCategory = document.getElementsByName('productCategory')[0];
            const validateDiv = document.querySelectorAll('.validateLabel')




            // validation for adding new product
            addProductForm.addEventListener('submit', (e) => {
                e.preventDefault()

                validateDiv.forEach((div) => {
                    div.innerHTML = ""
                })


                let isValid = true

                if (document.getElementById('product-image-upload').value === '') {
                    isValid = false;
                    Swal.fire({
                        title: "Invalid Inputs",
                        text: "Product image should not be empty",
                        icon: "error",
                        showConfirmButton: false,
                        timer: 800
                    })
                }
                if (productName.value.trim() === "" || productName.value.length < 3 || !isNaN(productName.value)) {
                    document.getElementsByClassName('validateLabel')[0].innerHTML = "Please provide a valid product name (min 3 characters).";
                    isValid = false;
                }

                if (isNaN(productPrice.value) || parseFloat(productPrice.value) <= 0 || productPrice.value.length < 1) {
                    document.getElementsByClassName('validateLabel')[1].innerHTML = "Please provide a valid price (between 1 and 100000).";
                    isValid = false;
                }

                if (isNaN(productQuantity.value) || parseInt(productQuantity.value) <= 0 || productQuantity.value.length < 1) {
                    document.getElementsByClassName('validateLabel')[2].innerHTML = "Please provide a valid quantity (between 1 and 100000).";
                    isValid = false;
                }

                // if (isNaN(productDiscount.value) || parseInt(productDiscount.value) < 0 || parseInt(productDiscount.value) > 100 || productDiscount.value.length === 0) {
                //     document.getElementsByClassName('validateLabel')[3].innerHTML = "Please provide a valid discount (between 0 and 100).";
                //     isValid = false;
                // }
                if (productCategory.value === null || productCategory.value === "") {
                    document.getElementsByClassName('validateLabel')[4].innerHTML = "Please select a category.";
                    isValid = false
                }


                if (productBrand.value.trim() === '' || productBrand.value.length <= 0 || !isNaN(productBrand.value)) {
                    document.getElementsByClassName('validateLabel')[5].innerHTML = "Please provide a valid brand (min 3 characters).";
                    isValid = false
                }

                if (productDescription.value.length <= 10 || productDescription.value.length > 500 || productDescription.value.trim === "") {
                    document.getElementsByClassName('validateLabel')[6].innerHTML = "Please provide a valid description (min 10 characters).";
                    isValid = false
                }

                if (isValid) {
                    addProductForm.submit()
                }
            })

            // const inputImage = document.getElementById('product-image-upload');
            // const imageContainer = document.getElementById('imageContainer');
            // let cropper;

            // inputImage.addEventListener('change', (event) => {
            //     const files = event.target.files;

            //     // Check if the number of files exceeds the limit
            //     if (files.length > 4 || imageContainer.children.length + files.length > 4) {
            //         Swal.fire({
            //             icon: "error",
            //             title: "File limit reached",
            //             text: "Maximum four files can be uploaded",
            //             timer: 12000,
            //         });
            //         return;
            //     }


            //     for (const file of files) {
            //         const reader = new FileReader();
            //         reader.onload = (e) => {
            //             const colDiv = document.createElement('div');
            //             colDiv.classList.add('col-md-3', 'mb-3', 'image-container');

            //             const img = document.createElement('img');
            //             img.src = e.target.result;
            //             img.classList.add('img-fluid', 'img-thumbnail', 'image-preview');

            //             const openModalButton = document.createElement('button');
            //             openModalButton.classList.add('btn', 'btn-primary', 'mt-2', 'me-2');
            //             openModalButton.innerText = 'Crop';
            //             openModalButton.setAttribute('type', 'button');
            //             openModalButton.setAttribute('data-bs-toggle', 'modal');
            //             openModalButton.setAttribute('data-bs-target', '#imageModal');
            //             openModalButton.addEventListener('click', () => {
            //                 document.getElementById('modalImage').src = e.target.result;
            //                 cropper = new Cropper(document.getElementById('modalImage'), {
            //                     aspectRatio: 1,
            //                     viewMode: 2,
            //                     autoCropArea: 1,
            //                 });

            //                 document.getElementById('cropButton').onclick = () => {
            //                     const canvas = cropper.getCroppedCanvas();
            //                     const croppedImage = canvas.toDataURL('image/png');

            //                     img.src = croppedImage;

            //                     cropper.destroy();
            //                     cropper = null;
            //                     document.getElementById('imageModal').querySelector('.btn-close').click();
            //                 };
            //             });

            //             const deleteButton = document.createElement('button');
            //             deleteButton.classList.add('btn', 'btn-danger', 'mt-2', 'ms-2');
            //             deleteButton.innerText = 'Delete';
            //             deleteButton.addEventListener('click', () => {
            //                 imageContainer.removeChild(colDiv);
            //             });

            //             colDiv.appendChild(img);
            //             colDiv.appendChild(openModalButton);
            //             colDiv.appendChild(deleteButton);
            //             imageContainer.appendChild(colDiv);
            //         }
            //         reader.readAsDataURL(file);
            //     }

            // })
            document.addEventListener('DOMContentLoaded', (event) => {
                const inputImage = document.getElementById('product-image-upload');
                const imageContainer = document.getElementById('imageContainer');
                let cropper;
                let currentImageElement;

                inputImage.addEventListener('change', (event) => {
                    const files = event.target.files;

                    // Check if the number of files exceeds the limit
                    if (files.length > 4 || imageContainer.children.length + files.length > 4) {
                        Swal.fire({
                            icon: "error",
                            title: "File limit reached",
                            text: "Maximum four files can be uploaded",
                            timer: 12000,
                        });
                        return;
                    }

                    for (const file of files) {
                        const reader = new FileReader();
                        reader.onload = (e) => {
                            const colDiv = document.createElement('div');
                            colDiv.classList.add('col-md-3', 'mb-3', 'image-container');

                            const img = document.createElement('img');
                            img.src = e.target.result;
                            img.classList.add('img-fluid', 'img-thumbnail', 'image-preview');

                            const openModalButton = document.createElement('button');
                            openModalButton.classList.add('btn', 'btn-primary', 'mt-2', 'me-2');
                            openModalButton.innerText = 'Crop';
                            openModalButton.setAttribute('type', 'button');
                            openModalButton.setAttribute('data-bs-toggle', 'modal');
                            openModalButton.setAttribute('data-bs-target', '#imageModal');
                            openModalButton.addEventListener('click', () => {
                                document.getElementById('modalImage').src = e.target.result;
                                currentImageElement = img;

                                // Initialize Cropper.js with the image
                                if (cropper) {
                                    cropper.destroy();
                                }

                                cropper = new Cropper(document.getElementById('modalImage'), {
                                    aspectRatio: 1,
                                    viewMode: 0,
                                    autoCropArea: 1,
                                });
                            });

                            const deleteButton = document.createElement('button');
                            deleteButton.classList.add('btn', 'btn-danger', 'mt-2', 'ms-2');
                            deleteButton.innerText = 'Delete';
                            deleteButton.addEventListener('click', () => {
                                imageContainer.removeChild(colDiv);
                                updateFileInput();
                            });

                            colDiv.appendChild(img);
                            colDiv.appendChild(openModalButton);
                            colDiv.appendChild(deleteButton);
                            imageContainer.appendChild(colDiv);
                        }
                        reader.readAsDataURL(file);
                    }

                    updateFileInput();
                });

                // Function to crop the image and update the preview
                function cropImage() {
                    if (!cropper) {
                        console.error('Cropper instance is not defined.');
                        return;
                    }

                    const canvas = cropper.getCroppedCanvas();
                    const croppedImage = canvas.toDataURL('image/png');

                    currentImageElement.src = croppedImage;

                    // Close the modal and destroy the cropper instance
                    closeCropModal();
                    updateFileInput();
                }

                // Function to properly close the crop modal and destroy the cropper instance
                function closeCropModal() {
                    const cropModal = document.getElementById('imageModal');
                    const modalInstance = bootstrap.Modal.getInstance(cropModal);
                    modalInstance.hide();  // Properly hide the modal

                    if (cropper) {
                        cropper.destroy();
                        cropper = null;
                    }
                }

                // Function to update the file input with the cropped images
                function updateFileInput() {
                    const images = imageContainer.getElementsByClassName('image-preview');
                    const dataTransfer = new DataTransfer();

                    for (let i = 0; i < images.length; i++) {
                        const dataURL = images[i].src;
                        const file = dataURLtoFile(dataURL, 'image' + i + '.png');
                        dataTransfer.items.add(file);
                    }

                    document.getElementById('product-image-upload').files = dataTransfer.files;
                }

                // Utility function to convert data URL to a File object
                function dataURLtoFile(dataurl, filename) {
                    const arr = dataurl.split(',');
                    const mime = arr[0].match(/:(.*?);/)[1];
                    const bstr = atob(arr[1]);
                    let n = bstr.length;
                    const u8arr = new Uint8Array(n);
                    while (n--) {
                        u8arr[n] = bstr.charCodeAt(n);
                    }
                    return new File([u8arr], filename, { type: mime });
                }

                // Attach event listeners to the crop button and modal close event
                document.getElementById('cropButton').onclick = cropImage;
                document.getElementById('imageModal').addEventListener('hidden.bs.modal', closeCropModal);
            });


        </script>