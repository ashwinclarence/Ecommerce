<style>
    .add-product-container {
        display: flex;
        flex-direction: column;
        justify-content: center;
        align-content: center;
        min-height: 100vh;
    }

    #product-image-preview {
        display: flex;
        flex-direction: row;
        justify-content: space-evenly;
        flex-wrap: wrap;
        width: 90%;
        margin: 1rem auto;
    }

    .product-image-box {
        display: flex;
        flex-direction: column;
        border: 1px solid #c5c5c5;
        border-radius: 10px;
        overflow: hidden;
    }

    .preview-img {
        width: 200px;
        height: 200px;
        object-fit: scale-down;
    }

    .delete-button {
        background-color: #c30606;
        padding: 10px;
        color: #ffffff;
        font-weight: 600;
        border: none;
        outline: none;
    }

    #product-description {
        resize: vertical;
        min-height: 200px;
    }
</style>

<%- include('navbar') %>

    <div class="add-product-container container">
        <div class="product-header mt-5">
            <h2 class="text-center">Add Product</h2>
        </div>
        <form action="/admin/add-product" method="post" enctype="multipart/form-data" id="add-product-form">

            <div class="row">
                <div class="col-lg-6 mt-3 ">
                    <div class="mb-3">
                        <label for="productName" class="form-label">Product Name</label>
                        <input type="text" class="form-control" id="productName" name="productName"
                            maxlength="100">
                        <div class="validateLabel text-danger"></div>
                    </div>

                    <div class="mb-3">
                        <label for="productPrice" class="form-label">Product Price</label>
                        <input type="number" class="form-control" id="productPrice" name="productPrice"
                           max="100000">
                        <div class="validateLabel text-danger"></div>
                    </div>

                    <div class="mb-3">
                        <label for="productQuantity" class="form-label">Product Quantity</label>
                        <input type="number" class="form-control" id="productQuantity" name="productQuantity"
                            max="100000">
                        <div class="validateLabel text-danger"></div>
                    </div>

                    <div class="mb-3">
                        <label for="productDiscount" class="form-label">Product Discount in percentage</label>
                        <input type="number" class="form-control" id="productDiscount" name="productDiscount" max="100">
                        <div class="validateLabel text-danger"></div>
                    </div>

                    <div class="mb-3">
                        <label for="productCategory" class="form-label">Product Category</label>
                        <select class="form-select" id="product-category" name="productCategory">
                            <option value="" selected disabled>Select a category</option>
                            <% productCategory.forEach((category)=> { %>
                                <option value="<%= category.categoryName %>">
                                    <%= category.categoryName %>
                                </option>
                                <% }) %>
                        </select>
                        <div class="validateLabel text-danger"></div>
                    </div>
                </div>

                <div class="col-lg-6 mt-3">
                    <div class="mb-3">
                        <label for="productBrand" class="form-label">Product Brand</label>
                        <input type="text" class="form-control" id="productBrand" name="productBrand"
                            maxlength="30">
                        <div class="validateLabel text-danger"></div>
                    </div>

                    <div class="mb-3">
                        <label for="productDescription" class="form-label">Product Description</label>
                        <textarea class="form-control" id="product-description" name="productDescription"
                           maxlength="500"></textarea>
                        <div class="validateLabel text-danger"></div>
                    </div>
                </div>
            </div>

            <div class="text-center mt-4">
                <input type="file" id="product-image-upload" name="productImage" accept="image/png, image/jpeg" multiple
                    class="d-none">
                <label for="product-image-upload" class="btn btn-warning ">
                    <i class="fas fa-upload"></i> &nbsp; Choose Images
                </label>
                <div id="product-image-preview" class="mt-3"></div>
            </div>

            <div class="text-center mt-4">
                <a href="/admin/products" class="btn btn-secondary w-25">Cancel</a>
                <button class="btn btn-success w-25" type="submit">Add Product</button>
            </div>
        </form>
    </div>


    <%- include('footer') %>



        <script>

            const addProductForm = document.getElementById('add-product-form')
            const productName = document.getElementsByName('productName')[0];
            const productPrice = document.getElementsByName('productPrice')[0];
            const productQuantity = document.getElementsByName('productQuantity')[0];
            const productBrand = document.getElementsByName('productBrand')[0];
            const productDiscount = document.getElementsByName('productDiscount')[0];
            const productDescription = document.getElementsByName('productDescription')[0];
            const productCategory = document.getElementsByName('productCategory')[0];
            const validateDiv = document.querySelectorAll('.validateLabel')




            // validation for adding new product
            addProductForm.addEventListener('submit', (e) => {
                e.preventDefault()

                validateDiv.forEach((div) => {
                    div.innerHTML = ""
                })


                let isValid = true

                if (document.getElementById('product-image-upload').value === '') {
                    isValid = false;
                    Swal.fire({
                        title: "Invalid Inputs",
                        text: "Product image should not be empty",
                        icon: "error",
                        showConfirmButton: false,
                        timer: 800
                    })
                }
                if (productName.value.trim() === "" || productName.value.length < 3 || !isNaN(productName.value)) {
                    document.getElementsByClassName('validateLabel')[0].innerHTML = "Please provide a valid product name (min 3 characters).";
                    isValid = false;
                }

                if (isNaN(productPrice.value) || parseFloat(productPrice.value) <= 0 || productPrice.value.length<1) {
                    document.getElementsByClassName('validateLabel')[1].innerHTML = "Please provide a valid price (between 1 and 100000).";
                    isValid = false;
                }

                if (isNaN(productQuantity.value) || parseInt(productQuantity.value) <= 0 || productQuantity.value.length<1) {
                    document.getElementsByClassName('validateLabel')[2].innerHTML = "Please provide a valid quantity (between 1 and 100000).";
                    isValid = false;
                }

                if (isNaN(productDiscount.value) || parseInt(productDiscount.value) < 0 || parseInt(productDiscount.value) > 100 || productDiscount.value.length===0) {
                    document.getElementsByClassName('validateLabel')[3].innerHTML = "Please provide a valid discount (between 0 and 100).";
                    isValid = false;
                }
                if (productCategory.value === null || productCategory.value==="") {
                    document.getElementsByClassName('validateLabel')[4].innerHTML = "Please select a category.";
                    isValid = false
                }


                if (productBrand.value.trim() === '' || productBrand.value.length <= 0 || !isNaN(productBrand.value)) {
                    document.getElementsByClassName('validateLabel')[5].innerHTML = "Please provide a valid brand (min 3 characters).";
                    isValid = false
                }

                if (productDescription.value.length <= 10 || productDescription.value.length > 500 || productDescription.value.trim === "") {
                    document.getElementsByClassName('validateLabel')[6].innerHTML = "Please provide a valid description (min 10 characters).";
                    isValid = false
                }

                if (isValid) {
                    addProductForm.submit()
                }
            })





            const productImageUpload = document.getElementById('product-image-upload');
            const productImagePreview = document.getElementById("product-image-preview");

            productImageUpload.addEventListener('change', () => {
                // Clear previous previews
                productImagePreview.innerHTML = '';

                // if user select more than 4 images then show a sweet alert and make the preview empty
                if (productImageUpload.files.length > 4) {
                    Swal.fire({
                        icon: "error",
                        title: "Oops...",
                        text: "Maximum file count is 4",
                    });
                    //clear the preview images
                    productImageUpload.value = '';
                } else if (productImageUpload.files.length === 0) {
                    Swal.fire({
                        icon: "error",
                        title: "Oops...",
                        text: "Minimum file count is 1",
                    });
                    //clear the preview images
                    productImageUpload.value = '';

                } else {
                    for (let i = 0; i < productImageUpload.files.length; i++) {
                        let reader = new FileReader();
                        let figure = document.createElement("div");
                        figure.classList.add('product-image-box');

                        reader.onload = () => {
                            let img = document.createElement("img");
                            img.classList.add("preview-img");
                            img.setAttribute("src", reader.result);
                            figure.appendChild(img);

                            // Create delete button with class delete-button
                            let deleteButton = document.createElement("button");
                            deleteButton.textContent = "Delete";
                            deleteButton.classList.add("delete-button");
                            deleteButton.addEventListener("click", () => {
                                // Remove the parent div (figure) when the delete button is clicked
                                figure.remove();
                            });
                            figure.appendChild(deleteButton);
                        };

                        productImagePreview.appendChild(figure);
                        reader.readAsDataURL(productImageUpload.files[i]);
                    }
                }
            });


        </script>