<style>
    .add-product-container {
        display: flex;
        flex-direction: column;
        justify-content: center;
        align-content: center;
        min-height: 100vh;
    }

    .add-product-container form {
        margin-bottom: 5rem;
    }

    .product-form-top {
        display: flex;
        flex-direction: row;
        margin-bottom: 3rem;
        flex-wrap: wrap;

    }

    .product-form-bottom {
        display: flex;
        flex-direction: column;
        justify-content: space-between;
        align-items: center;
        gap: 3rem;

    }

    .product-form-left {
        display: flex;
        flex-direction: column;
        width: 50%;
        margin-top: 3rem;
        align-items: center;
    }

    .product-form-right {
        display: flex;
        flex-direction: column;
        width: 50%;
        margin-top: 3rem;
        align-items: center;
    }

    .product-form-left input,
    .product-form-right input {
        border: 1px solid #c5c5c5;
        outline: none;
        padding: 10px;
        border-radius: 10px;
        width: 90%;
        margin-bottom: 1rem;
    }

    .product-form-left label,
    .product-form-right label {
        width: 90%;
    }

    /* remove the increment and decrement arrows in input type number */
    input[type="number"]::-webkit-inner-spin-button,
    input[type="number"]::-webkit-outer-spin-button {
        -webkit-appearance: none;
        margin: 0;
    }

    #product-description {
        border: 1px solid #c5c5c5;
        outline: none;
        padding: 10px;
        width: 90%;
        border-radius: 10px;
        resize: vertical;
        min-height: 200px;
    }



    #product-category {
        border: 1px solid #c5c5c5;
        outline: none;
        padding: 10px;
        border-radius: 10px;
        width: 90%;
    }

    #product-image-preview {
        display: flex;
        flex-direction: row;
        justify-content: space-evenly;
        flex-wrap: wrap;
        width: 90%;
    }

    .product-image-box {
        display: flex;
        flex-direction: column;
        border: 1px solid #c5c5c5;
        border-radius: 10px;
        overflow: hidden;

    }

    .image-container {
        width: 250px;
        height: 300px;
        border-radius: 10px;
        overflow: hidden;

    }

    .image-container img {
        width: 250px;
        height: 250px;
        object-fit: scale-down;

    }


    #imageContainer {
        display: flex;
        flex-direction: row;
        align-items: center;
        justify-content: space-around;
        flex-wrap: wrap;
        gap: 2rem;
    }
</style>



<%- include('navbar') %>

    <div class="add-product-container container">
        <div class="product-header mt-5">
            <h2 class="text-center">Edit Product</h2>
        </div>

        <!-- form action is set with product id to update the product details based on the id -->
        <form action="/admin/edit-product/<%= product.id %>" method="post" enctype="multipart/form-data"
            id="add-product-form">

            <div class="product-form-top">

                <div class="product-form-left">

                    <!-- input for product name -->
                    <label for="productName">Product Name</label>
                    <input type="text" name="productName" minlength="3" maxlength="100"
                        value="<%= product.productName %>" disabled>

                    <!-- input for product price -->
                    <label for="productPrice">Product Price</label>
                    <input type="number" name="productPrice" min="1" max="100000" value="<%= product.productPrice %>"
                        required>

                    <!-- input for product quantity -->
                    <label for="productQuantity">Product Quantity</label>
                    <input type="number" name="productQuantity" min="0" max="100000"
                        value="<%= product.productQuantity %>" required>

                    <!-- input for product discount
                    <label for="productDiscount">Product Discount in percentage</label>
                    <input type="number" name="productDiscount" min="0" max="100" value="<%= product.productDiscount %>"
                        required> -->

                    <!-- input for select category this category is from backend -->
                    <label for="productCategory">Product Category </label>
                    <select name="productCategory" id="product-category" disabled required>
                        <option value="<%= product.productCategory %>" selected disabled>
                            <%= product.productCategory %>
                        </option>
                    </select>

                </div>
                <div class="product-form-right">

                    <!-- input for product brand -->
                    <label for="productBrand">Product Brand</label>
                    <input type="text" name="productBrand" minlength="3" maxlength="30"
                        value="<%= product.productBrand %>" disabled required>

                    <!-- input for product description -->
                    <label for="productDescription">Product Description</label>
                    <textarea name="productDescription" id="product-description" minlength="10" maxlength="500"
                        required><%= product.productDescription %></textarea>

                </div>
            </div>
            <div class="product-form-bottom">

                <!-- input file for image upload but the button is display is set as none
                <input type="file" id="product-image-upload" name="productImage" accept="image/png, image/jpeg" multiple class="d-none"> -->

                <!-- the product preview will generate based on what we select -->
                <!-- <div id="product-image-preview">

                    <% if (product.productImage && product.productImage.length> 0) { %>
                        <% product.productImage.forEach(function(image, index) { %>
                            <div class="image-container">
                                <img src="../../<%= image %>" alt="Product Image" class="product-image"
                                    data-index="<%= index %>" onclick="initCropper(this)">
                                <button type="button" class="btn btn-danger btn-sm delete-image"
                                    onclick="deleteImage('<%= product._id %>', '<%= index %>')">
                                    <i class="material-icons">delete</i>
                                </button>
                                <input type="hidden" name="existingImages[<%= index %>]" value="<%= image %>">
                            </div>
                            <% }); %>
                                <% } %>
                </div> -->

                <div class="text-center mt-4">
                    <input type="file" id="product-image-upload" name="productImage" accept="image/png, image/jpeg"
                        multiple class="d-none">
                    <label for="product-image-upload" class="btn btn-warning">
                        <i class="fas fa-upload"></i> &nbsp; Choose Images
                    </label>
                    <div class="container mt-4">
                        <div id="imageContainer" class="row">
                            <% if (product.productImage && product.productImage.length> 0) { %>
                                <% product.productImage.forEach(function(image, index) { %>
                                    <div class="col-md-3 mb-3 image-container" data-image-path="<%= image %>">
                                        <img src="../../<%= image %>" class="img-fluid img-thumbnail image-preview"
                                            onclick="initCropper(this)">
                                        <button class="btn btn-danger mt-2 ms-2" type="button"
                                            onclick="deleteImage(this)">Delete</button>
                                    </div>
                                    <% }); %>
                                        <% } %>
                        </div>

                    </div>
                </div>

                <!-- hidden filed for deleted images -->
                <input type="hidden" id="deletedImages" name="deletedImages" value="">

                <!-- <div class="text-center mt-4">
                    <input type="file" class="form-control border" id="images" name="productImage"
                        onchange="previewImages(event)" accept="image/*" multiple>
                </div> -->



                <!-- the form submission and cancel buttons -->
                <div>
                    <a href="/admin/products" class="btn btn-secondary">Cancel</a>
                    <button class="btn btn-success" type="submit">Update Product</button>
                </div>
            </div>

        </form>
    </div>

    <%- include('footer') %>


        <!-- Cropper Modal -->
        <div class="modal fade" id="imageModal" tabindex="1" aria-labelledby="imageModalLabel" aria-hidden="true">
            <div class="modal-dialog">
                <div class="modal-content">
                    <div class="modal-header">
                        <h5 class="modal-title" id="imageModalLabel">Crop Image</h5>
                        <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                    </div>
                    <div class="modal-body">
                        <img id="modalImage" src="" class="img-fluid">
                    </div>
                    <div class="modal-footer">
                        <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
                        <button type="button" id="cropButton" class="btn btn-primary">Crop</button>
                    </div>
                </div>
            </div>
        </div>
        <!-- <div class="modal fade" id="cropper-modal" tabindex="-1" role="dialog" aria-labelledby="cropperModalLabel"
            aria-hidden="true">
            <div class="modal-dialog modal-lg" role="document">
                <div class="modal-content">
                    <div class="modal-header">
                        <h5 class="modal-title" id="cropperModalLabel">Crop Image</h5>
                    </div>
                    <div class="modal-body">
                        <div id="cropper-container"></div>
                    </div>
                    <div class="modal-footer">
                        <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                        <button type="button" class="btn btn-primary" id="crop-image">Crop</button>
                    </div>
                </div>
            </div>
        </div> -->




        <script>
            document.addEventListener('DOMContentLoaded', (event) => {
                const addProductForm = document.getElementById('add-product-form');
                const productName = document.getElementsByName('productName')[0];
                const productPrice = document.getElementsByName('productPrice')[0];
                const productQuantity = document.getElementsByName('productQuantity')[0];
                const productDescription = document.getElementsByName('productDescription')[0];
                const inputImage = document.getElementById('product-image-upload');
                const imageContainer = document.getElementById('imageContainer');

                let cropper;
                let currentImage;
                let cropModalInstance;
                let currentImageIndex;
                let deletedImages = [];

                addProductForm.addEventListener('submit', (e) => {
                    e.preventDefault();

                    let isValid = true;
                    let errorMessage = "";

                    if (imageContainer.children.length + inputImage.files.length <= 0) {
                        isValid = false;
                        errorMessage = "Product image should not be empty";
                    }
                    if (productName.value.trim() === "" || productName.value.length <= 0 || !isNaN(productName.value)) {
                        errorMessage = "Product Name should not be empty";
                        isValid = false;
                    }
                    if (isNaN(productPrice.value) || parseFloat(productPrice.value) <= 0) {
                        errorMessage = 'Product Price must be greater than zero and it should not contain any alphabets';
                        isValid = false;
                    }
                    if (isNaN(productQuantity.value) || parseInt(productQuantity.value) < 0) {
                        errorMessage = 'Product quantity should be a number and it must be greater than or equal to zero';
                        isValid = false;
                    }
                    if (productDescription.value.length <= 10 || productDescription.value.length > 500 || productDescription.value.trim() === "") {
                        errorMessage = 'Product description must be between 10 to 80 words';
                        isValid = false;
                    }

                    if (!isValid) {
                        Swal.fire({
                            title: "Invalid Inputs",
                            text: errorMessage,
                            icon: "error"
                        });
                    } else {
                        document.getElementById('deletedImages').value = JSON.stringify(deletedImages);
                        addProductForm.submit();
                    }
                });

                inputImage.addEventListener('change', handleImageUpload);

                function handleImageUpload(event) {
                    const files = event.target.files;

                    if (files.length > 4 || imageContainer.children.length + files.length > 4) {
                        Swal.fire({
                            icon: "error",
                            title: "File limit reached",
                            text: "Maximum four files can be uploaded",
                            timer: 12000,
                        });
                        return;
                    }

                    Array.from(files).forEach(file => {
                        const reader = new FileReader();
                        reader.onload = (e) => addImageToContainer(e.target.result);
                        reader.readAsDataURL(file);
                    });

                    updateFileInput();
                }

                function addImageToContainer(src) {
                    const colDiv = document.createElement('div');
                    colDiv.classList.add('col-md-3', 'mb-3', 'image-container');

                    const img = document.createElement('img');
                    img.src = src;
                    img.classList.add('img-fluid', 'img-thumbnail', 'image-preview');
                    img.style.cursor = 'pointer';
                    img.addEventListener('click', () => initCropper(img));

                    const deleteButton = document.createElement('button');
                    deleteButton.classList.add('btn', 'btn-danger', 'mt-2', 'ms-2');
                    deleteButton.innerText = 'Delete';
                    deleteButton.addEventListener('click', () => deleteImage(deleteButton));

                    colDiv.appendChild(img);
                    colDiv.appendChild(deleteButton);
                    imageContainer.appendChild(colDiv);
                }

                function initCropper(img) {
                    currentImageIndex = Array.from(imageContainer.children).indexOf(img.closest('.image-container'));
                    const modal = new bootstrap.Modal(document.getElementById('imageModal'));
                    modal.show();
                    cropModalInstance = modal;

                    const modalImage = document.getElementById('modalImage');
                    modalImage.src = img.src;

                    if (cropper) {
                        cropper.destroy();
                    }

                    cropper = new Cropper(modalImage, {
                        aspectRatio: 1,
                        viewMode: 1,
                        minContainerWidth: 400,
                        minContainerHeight: 400,
                    });

                    currentImage = img;
                }

                document.getElementById('imageModal').addEventListener('hidden.bs.modal', function () {
                    if (cropper) {
                        cropper.destroy();
                        cropper = null;
                    }
                });

                document.getElementById('cropButton').onclick = function () {
                    const croppedCanvas = cropper.getCroppedCanvas();
                    croppedCanvas.toBlob((blob) => {
                        const file = new File([blob], 'cropped_image.jpg', { type: 'image/jpeg' });
                        const reader = new FileReader();
                        reader.onload = function (e) {
                            currentImage.src = e.target.result;
                            currentImage.setAttribute('data-cropped', 'true');
                            updateFileInput();
                        };
                        reader.readAsDataURL(blob);
                    }, 'image/jpeg');
                };

                function updateFileInput() {
                    const images = imageContainer.getElementsByClassName('image-preview');
                    const dataTransfer = new DataTransfer();

                    Array.from(images).forEach((img, i) => {
                        const file = dataURLtoFile(img.src, `image${i}.png`);
                        dataTransfer.items.add(file);
                    });

                    inputImage.files = dataTransfer.files;
                }

                function dataURLtoFile(dataurl, filename) {
                    const arr = dataurl.split(',');
                    const mime = arr[0].match(/:(.*?);/)[1];
                    const bstr = atob(arr[1]);
                    const u8arr = new Uint8Array(bstr.length);
                    for (let i = 0; i < bstr.length; i++) {
                        u8arr[i] = bstr.charCodeAt(i);
                    }
                    return new File([u8arr], filename, { type: mime });
                }

                window.deleteImage = function (button) {
                    const colDiv = button.closest('.image-container');
                    const imagePath = colDiv.dataset.imagePath;
                    if (imagePath) {
                        deletedImages.push(imagePath);
                        document.getElementById('deletedImages').value = JSON.stringify(deletedImages);
                    }
                    imageContainer.removeChild(colDiv);
                    updateFileInput();
                };

                window.deleteExistImage = window.deleteImage;
            });


        </script>