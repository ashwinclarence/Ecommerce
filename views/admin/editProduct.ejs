<style>
    .add-product-container {
        display: flex;
        flex-direction: column;
        justify-content: center;
        align-content: center;
        min-height: 100vh;
    }

    .add-product-container form {
        margin-bottom: 5rem;
    }

    .product-form-top {
        display: flex;
        flex-direction: row;
        margin-bottom: 3rem;
        flex-wrap: wrap;

    }

    .product-form-bottom {
        display: flex;
        flex-direction: column;
        justify-content: space-between;
        align-items: center;
        gap: 3rem;

    }

    .product-form-left {
        display: flex;
        flex-direction: column;
        width: 50%;
        margin-top: 3rem;
        align-items: center;
    }

    .product-form-right {
        display: flex;
        flex-direction: column;
        width: 50%;
        margin-top: 3rem;
        align-items: center;
    }

    .product-form-left input,
    .product-form-right input {
        border: 1px solid #c5c5c5;
        outline: none;
        padding: 10px;
        border-radius: 10px;
        width: 90%;
        margin-bottom: 1rem;
    }

    .product-form-left label,
    .product-form-right label {
        width: 90%;
    }

    /* remove the increment and decrement arrows in input type number */
    input[type="number"]::-webkit-inner-spin-button,
    input[type="number"]::-webkit-outer-spin-button {
        -webkit-appearance: none;
        margin: 0;
    }

    #product-description {
        border: 1px solid #c5c5c5;
        outline: none;
        padding: 10px;
        width: 90%;
        border-radius: 10px;
        resize: vertical;
        min-height: 200px;
    }



    #product-category {
        border: 1px solid #c5c5c5;
        outline: none;
        padding: 10px;
        border-radius: 10px;
        width: 90%;
    }

    #product-image-preview {
        display: flex;
        flex-direction: row;
        justify-content: space-evenly;
        flex-wrap: wrap;
        width: 90%;
    }

    .product-image-box {
        display: flex;
        flex-direction: column;
        border: 1px solid #c5c5c5;
        border-radius: 10px;
        overflow: hidden;

    }
    .image-container {
        display: flex;
        flex-direction: column;
        border: 1px solid #c5c5c5;
        border-radius: 10px;
        overflow: hidden;

    }
    .image-container img{
        width: 200px;
        height: 200px;
        object-fit: scale-down;

    }

    .preview-img {
        width: 200px;
        height: 200px;
        object-fit: scale-down;
    }

    .delete-button {
        background-color: #c30606;
        padding: 10px;
        color: #ffffff;
        font-weight: 600;
        border: none;
        outline: none;
    }

    .btn {
        min-width: 150px;
    }
</style>



<%- include('navbar') %>

    <div class="add-product-container container">
        <div class="product-header mt-5">
            <h2 class="text-center">Edit Product</h2>
        </div>

        <!-- form action is set with product id to update the product details based on the id -->
        <form action="/admin/edit-product/<%= product.id %>" method="post" enctype="multipart/form-data"
            id="add-product-form">

            <div class="product-form-top">

                <div class="product-form-left">

                    <!-- input for product name -->
                    <label for="productName">Product Name</label>
                    <input type="text" name="productName" minlength="3" maxlength="100"
                        value="<%= product.productName %>" disabled>

                    <!-- input for product price -->
                    <label for="productPrice">Product Price</label>
                    <input type="number" name="productPrice" min="1" max="100000" value="<%= product.productPrice %>"
                        required>

                    <!-- input for product quantity -->
                    <label for="productQuantity">Product Quantity</label>
                    <input type="number" name="productQuantity" min="0" max="100000"
                        value="<%= product.productQuantity %>" required>

                    <!-- input for product discount
                    <label for="productDiscount">Product Discount in percentage</label>
                    <input type="number" name="productDiscount" min="0" max="100" value="<%= product.productDiscount %>"
                        required> -->

                    <!-- input for select category this category is from backend -->
                    <label for="productCategory">Product Category </label>
                    <select name="productCategory" id="product-category" disabled required>
                        <option value="" selected disabled>
                            <%= product.productCategory %>
                        </option>
                    </select>

                </div>
                <div class="product-form-right">

                    <!-- input for product brand -->
                    <label for="productBrand">Product Brand</label>
                    <input type="text" name="productBrand" minlength="3" maxlength="30"
                        value="<%= product.productBrand %>" disabled required>

                    <!-- input for product description -->
                    <label for="productDescription">Product Description</label>
                    <textarea name="productDescription" id="product-description" minlength="10" maxlength="500"
                        required><%= product.productDescription %></textarea>

                </div>
            </div>
            <div class="product-form-bottom">

                <!-- input file for image upload but the button is display is set as none
                <input type="file" id="product-image-upload" name="productImage" accept="image/png, image/jpeg" multiple class="d-none"> -->

                <!-- the product preview will generate based on what we select -->
                <div id="product-image-preview">

                    <% if (product.productImage && product.productImage.length> 0) { %>
                        <% product.productImage.forEach(function(image, index) { %>
                            <div class="image-container">
                                <img src="../../<%= image %>" alt="Product Image" class="product-image"
                                    data-index="<%= index %>" onclick="initCropper(this)">
                                <button type="button" class="btn btn-danger btn-sm delete-image"
                                    onclick="deleteImage('<%= product._id %>', '<%= index %>')">
                                    <i class="material-icons">delete</i>
                                </button>
                                <input type="hidden" name="existingImages[<%= index %>]" value="<%= image %>">
                            </div>
                            <% }); %>
                                <% } %>
                </div>

                <div class="text-center mt-4">
                    <input type="file" class="form-control border" id="images" name="productImage"
                        onchange="previewImages(event)" accept="image/*" multiple>
                </div>



                <!-- the form submission and cancel buttons -->
                <div>
                    <a href="/admin/products" class="btn btn-secondary">Cancel</a>
                    <button class="btn btn-success" type="submit">Update Product</button>
                </div>
            </div>

        </form>
    </div>

    <%- include('footer') %>


        <!-- Cropper Modal -->
        <div class="modal fade" id="cropper-modal" tabindex="-1" role="dialog" aria-labelledby="cropperModalLabel"
            aria-hidden="true">
            <div class="modal-dialog modal-lg" role="document">
                <div class="modal-content">
                    <div class="modal-header">
                        <h5 class="modal-title" id="cropperModalLabel">Crop Image</h5>
                    </div>
                    <div class="modal-body">
                        <div id="cropper-container"></div>
                    </div>
                    <div class="modal-footer">
                        <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                        <button type="button" class="btn btn-primary" id="crop-image">Crop</button>
                    </div>
                </div>
            </div>
        </div>




        <script>

            const addProductForm = document.getElementById('add-product-form')
            const productName = document.getElementsByName('productName')[0];
            const productPrice = document.getElementsByName('productPrice')[0];
            const productQuantity = document.getElementsByName('productQuantity')[0];
            const productBrand = document.getElementsByName('productBrand')[0];
            const productDiscount = document.getElementsByName('productDiscount')[0];
            const productDescription = document.getElementsByName('productDescription')[0];
            const productCategory = document.getElementsByName('productCategory')[0];



            addProductForm.addEventListener('submit', (e) => {
                e.preventDefault()


                let isValid = true
                let errorMessage = ""



                if (document.getElementById('images').value === '') {
                    errorMessage = "Product image should not be empty";
                    isValid = false;
                }
                if (productName.value.trim() === "" || productName.value.length <= 0 || !isNaN(productName.value)) {
                    errorMessage = "Product Name should not be empty";
                    isValid = false;
                }

                if (isNaN(productPrice.value) || parseFloat(productPrice.value) <= 0) {
                    errorMessage = 'Product Price must be greater than zero and it should not contain any alphabets'
                    isValid = false;
                }

                if (isNaN(productQuantity.value) || parseInt(productQuantity.value) < 0) {
                    errorMessage = 'Product quality should be a number and it must be greater than zero'
                    isValid = false;
                }



                if (productDescription.value.length <= 10 || productDescription.value.length > 500 || productDescription.value.trim === "") {
                    errorMessage = 'Product description must be between 10 to 80 word '
                    isValid = false
                }

                if (isValid === false) {
                    Swal.fire({
                        title: "Invalid Inputs",
                        text: errorMessage,
                        icon: "error"
                    })
                } else {
                    addProductForm.submit()
                }
            })



            function previewImages(event) {
                var previewContainer = document.getElementById('product-image-preview');
                var files = event.target.files;

                for (var i = 0; i < files.length; i++) {
                    var file = files[i];
                    var reader = new FileReader();

                    reader.onload = function (e) {
                        var previewImage = document.createElement('div');
                        previewImage.classList.add('image-container');

                        var imgElement = document.createElement('img');
                        imgElement.classList.add('product-image');
                        imgElement.src = e.target.result;

                        imgElement.onclick = function () {
                            initCropper(this);
                        };

                        var deleteButton = document.createElement('button');
                        deleteButton.type = 'button';
                        deleteButton.classList.add('btn', 'btn-danger', 'btn-sm', 'delete-image');
                        deleteButton.innerHTML = 'delete';
                        deleteButton.onclick = function () {
                            previewContainer.removeChild(previewImage);
                        };

                        previewImage.appendChild(imgElement);
                        previewImage.appendChild(deleteButton);
                        previewContainer.appendChild(previewImage);
                    };

                    reader.readAsDataURL(file);
                }
            }

            function deleteImage(productId, index) {
                Swal.fire({
                    title: 'Are you sure?',
                    text: 'Do you really want to delete this image?',
                    icon: 'warning',
                    showCancelButton: true,
                    confirmButtonText: 'Yes, delete it!',
                    cancelButtonText: 'No, cancel!',
                    reverseButtons: true
                }).then((result) => {
                    if (result.isConfirmed) {
                        const URL = `/admin/deleteSingleImage/${index}/${productId}`;
                        fetch(URL, {
                            method: "DELETE",
                            headers: {
                                "Content-Type": "application/json"
                            }
                        }).then((res) => {
                            return res.json()
                        }).then((data) => {

                        }).catch((err) => {
                            console.log("Error on deleting the product image in admin", err);
                        })
                    }
                });
            }

            let cropper;
            let currentImage;
            let cropModalInstance;
            let currentImageIndex;

            function initCropper(img) {
                currentImageIndex = Array.prototype.indexOf.call(img.parentNode.parentNode.children, img.parentNode);
                const modal = new bootstrap.Modal(document.getElementById('cropper-modal'));
                modal.show();
                cropModalInstance = modal;

                const cropperContainer = document.getElementById('cropper-container');
                cropperContainer.innerHTML = '';
                const clonedImg = img.cloneNode(true);
                cropperContainer.appendChild(clonedImg);

                if (cropper) {
                    cropper.destroy();
                }

                cropper = new Cropper(clonedImg, {
                    aspectRatio: 1,
                    viewMode: 1,
                    minContainerWidth: 400,
                    minContainerHeight: 400,
                });

                currentImage = img;
            }

            document.getElementById('cropper-modal').addEventListener('hidden.bs.modal', function () {
                if (cropper) {
                    cropper.destroy();
                    cropper = null;
                }
            });

            document.getElementById('crop-image').onclick = function () {
                const croppedCanvas = cropper.getCroppedCanvas();
                croppedCanvas.toBlob((blob) => {
                    const file = new File([blob], 'cropped_image.jpg', { type: 'image/jpeg' });
                    const fileInput = document.getElementById('images');
                    const files = fileInput.files;

                    const dataTransfer = new DataTransfer();
                    for (let i = 0; i < files.length; i++) {
                        if (i === currentImageIndex) {
                            dataTransfer.items.add(file);
                        } else {
                            dataTransfer.items.add(files[i]);
                        }
                    }
                    fileInput.files = dataTransfer.files;

                    const reader = new FileReader();
                    reader.onload = function (e) {
                        currentImage.src = e.target.result;
                        currentImage.setAttribute('data-cropped', 'true');
                        cropModalInstance.hide();
                    };
                    reader.readAsDataURL(blob);
                }, 'image/jpeg');
            };
        </script> 