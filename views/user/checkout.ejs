<style>
    .checkout-container {
        padding: 4rem 0;
        min-height: 100vh;
    }

    .card {
        position: relative;
        display: flex;
        flex-direction: column;
        min-width: 0;
        word-wrap: break-word;
        background-color: #fff;
        background-clip: border-box;
        border: 0 solid rgba(0, 0, 0, .125);
        border-radius: 1rem;
    }

    .card-body {
        -webkit-box-flex: 1;
        -ms-flex: 1 1 auto;
        flex: 1 1 auto;
        padding: 1.5rem 1.5rem;
    }

    .image-container-checkout {
        width: 100px;
        height: 100px;
        overflow: hidden;
    }

    .image-container-checkout img {
        width: 100px;
        height: 100px;
        object-fit: contain;
    }

    .product-name-checkout {
        width: 300px;
        text-overflow: ellipsis;
    }

    .address-table tr {
        display: grid;
        grid-template-columns: 20% 5% 75%;
    }

    /* add address modal */

    #add-address-form {
        display: flex;
        flex-direction: column;
        gap: 1.5rem;
        padding: 2rem;
    }

    #add-address-form input {
        padding: .5rem;
        border: 1px solid #aaaaaa;
        border-radius: 5px;
    }

    #edit-address-form {
        display: flex;
        flex-direction: column;
        gap: 1.5rem;
        padding: 2rem;
    }

    #edit-address-form input {
        padding: .5rem;
        border: 1px solid #aaaaaa;
        border-radius: 5px;
    }

    .add-address-box {
        display: flex;
        flex-direction: column;
    }

    .validate-user-address {
        color: red;
    }

    .payment-flex {
        display: flex;
        justify-content: space-between;
        align-items: center;
        width: 100%;
    }

    #alert-for-COD {
        display: none;
    }

    input[type="radio"] {
        border: 4px solid #000000;
    }
</style>



<%- include('secondaryNavbar') %>
    <div class="checkout-container container">
        <h1 class="h3 mb-5">Checkout</h1>
        <div class="row">
            <!-- left side -->
            <div class="accordion col-lg-8" id="accordionExample">
                <div class="accordion-item">
                    <h2 class="accordion-header" id="headingOne">
                        <button class="accordion-button" type="button" data-bs-toggle="collapse"
                            data-bs-target="#collapseOne" aria-expanded="true" aria-controls="collapseOne">
                            <h4>Delivery Address</h4>
                        </button>
                    </h2>
                    <div id="collapseOne" class="accordion-collapse collapse show" aria-labelledby="headingOne"
                        data-bs-parent="#accordionExample">
                        <div class="accordion-body">
                            <% if(addressData.length<4){ %>
                                <div class="text-center m-3">
                                    <button class="btn btn-primary " type="button" data-bs-toggle="modal"
                                        data-bs-target=".add-new-address-modal" id="add-address-button">Add
                                        address</button>
                                </div>
                                <% } %>


                                    <% addressData.forEach((address,index)=>{ %>
                                        <div class="form-check mt-4" id="address-<%= index %>">
                                            <input class="form-check-input checkout-address" type="radio"
                                                name="checkoutAddress" id="checkout-address" value="<%= index %>" />
                                            <!-- inner -->
                                            <div class="border border-3 rounded p-3 table-responsive"
                                                for="checkout-address">
                                                <strong>
                                                    <%= address.contactName %>
                                                </strong>
                                                <table class="table address-table">
                                                    <tr>
                                                        <td>pincode</td>
                                                        <td>:</td>
                                                        <td>
                                                            <%= address.pincode %>
                                                        </td>
                                                    </tr>
                                                    <tr>
                                                        <td>Home Address</td>
                                                        <td>:</td>
                                                        <td>
                                                            <%= address.homeAddress %>
                                                        </td>
                                                    </tr>
                                                    <tr>
                                                        <td>Area Address</td>
                                                        <td>:</td>
                                                        <td>
                                                            <%= address.areaAddress %>
                                                        </td>
                                                    </tr>
                                                    <tr>
                                                        <td>LandMark</td>
                                                        <td>:</td>
                                                        <td>
                                                            <%= address.landmark %>
                                                        </td>
                                                    </tr>

                                                </table>

                                                <!-- address action buttons -->
                                                <button class="btn btn-warning btn-sm" type="button"
                                                    data-bs-toggle="modal" data-bs-target=".edit-address-modal"
                                                    id="edit-address-button" data-address=" <%= address %>"
                                                    data-index="<%= index %>">Edit
                                                    address</button>
                                                <button class="btn btn-danger btn-sm"
                                                    onclick="deleteAddress('<%=index%>')">Delete
                                                    Address</button>
                                            </div>
                                        </div>
                                        <% }) %>



                        </div>
                    </div>
                </div>
                <!-- end of first accordion -->

                <!-- new address adding modal -->
                <div class="modal fade add-new-address-modal" tabindex="-1" role="dialog"
                    aria-labelledby="myLargeModalLabel" aria-hidden="true">
                    <div class="modal-dialog modal-lg">
                        <div class="modal-content ">
                            <div class="modal-body">
                                <form action="/add-address-checkout" method="post" id="add-address-form">
                                    <h2 class="text-center">Add Address</h2>
                                    <div class="add-address-box">
                                        <label for="contact-name">Contact user name</label>
                                        <input type="text" name="name" id="contact-name">
                                        <label for="contact-name" class="validate-user-address"></label>
                                    </div>
                                    <div class="add-address-box">
                                        <label for="address-pincode">Pincode</label>
                                        <input type="text" name="pincode" id="address-pincode" placeholder="xxxxxx">
                                        <label for="address-pincode" class="validate-user-address"></label>
                                    </div>
                                    <div class="add-address-box">
                                        <label for="address-house">Flat, House no., Building, Company, Apartment</label>
                                        <input type="text" name="addressHome" id="address-house" maxlength="100">
                                        <label for="address-house" class="validate-user-address"></label>
                                    </div>
                                    <div class="add-address-box">
                                        <label for="address-area">Area, Street, Sector, Village</label>
                                        <input type="text" name="addressArea" id="address-area" maxlength="100">
                                        <label for="address-area" class="validate-user-address"></label>
                                    </div>

                                    <div class="add-address-box">
                                        <label for="address-landmark">Landmark</label>
                                        <input type="text" name="addressLandmark" id="address-landmark" maxlength="100"
                                            placeholder="near international airport">
                                        <label for="address-landmark" class="validate-user-address"></label>
                                    </div>
                                    <div class="text-center">
                                        <button type="button" class="btn btn-secondary"
                                            data-bs-dismiss="modal">Cancel</button>

                                        <button class="btn btn-success" type="submit">Add Address</button>
                                    </div>


                                </form>
                            </div>
                        </div>
                    </div>
                </div>
                <!-- end of modal for adding new address -->


                <!-- edit address modal -->
                <div class="modal fade edit-address-modal" tabindex="-1" role="dialog"
                    aria-labelledby="myLargeModalLabel" aria-hidden="true">
                    <div class="modal-dialog modal-lg">
                        <div class="modal-content ">
                            <div class="modal-body">
                                <form action="/edit-address-checkout" method="post" id="edit-address-form">
                                    <h2 class="text-center">Edit Address</h2>
                                    <div class="add-address-box">
                                        <label for="contact-name">Contact user name</label>
                                        <input type="text" name="name" id="contact-name">
                                        <label for="contact-name" class="validate-user-address"></label>
                                    </div>
                                    <div class="add-address-box">
                                        <label for="address-pincode">Pincode</label>
                                        <input type="text" name="pincode" id="address-pincode">
                                        <label for="address-pincode" class="validate-user-address"></label>
                                    </div>
                                    <div class="add-address-box">
                                        <label for="address-house">Flat, House no., Building, Company, Apartment</label>
                                        <input type="text" name="addressHome" id="address-house" maxlength="100">
                                        <label for="address-house" class="validate-user-address"></label>
                                    </div>
                                    <div class="add-address-box">
                                        <label for="address-area">Area, Street, Sector, Village</label>
                                        <input type="text" name="addressArea" id="address-area" maxlength="100">
                                        <label for="address-area" class="validate-user-address"></label>
                                    </div>

                                    <div class="add-address-box">
                                        <label for="address-landmark">Landmark</label>
                                        <input type="text" name="addressLandmark" id="address-landmark" maxlength="100">
                                        <label for="address-landmark" class="validate-user-address"></label>
                                    </div>
                                    <!-- hidden field for storing the index of the  -->
                                    <input type="text" name="addressIndex" id="address-index" hidden>
                                    <div class="text-center">
                                        <button type="button" class="btn btn-secondary"
                                            data-dismiss="modal">Cancel</button>

                                        <button class="btn btn-success" type="submit">Edit Address</button>
                                    </div>


                                </form>
                            </div>
                        </div>
                    </div>
                </div>
                <!-- end of modal for edit address -->


                <!-- second accordion -->
                <div class="accordion-item">
                    <h2 class="accordion-header" id="headingThree">
                        <button class="accordion-button collapsed" type="button" data-bs-toggle="collapse"
                            data-bs-target="#collapseThree" aria-expanded="false" aria-controls="collapseThree">
                            <h4>Selected items</h4>
                        </button>
                    </h2>
                    <div id="collapseThree" class="accordion-collapse collapse" aria-labelledby="headingThree"
                        data-bs-parent="#accordionExample">
                        <div class="accordion-body">

                            <table class="table">

                                <tr class="text-center">
                                    <th>Sl.no</th>
                                    <th>Image</th>
                                    <th>Name</th>
                                    <th>Brand</th>
                                    <th>Price</th>
                                    <th>Category</th>
                                    <th>Quantity</th>
                                </tr>

                                <% cartItems.forEach((product,index)=>{ %>
                                    <tr class="text-center">
                                        <th>
                                            <%= index+1 %>
                                        </th>
                                        <td class="image-container-checkout"><img
                                                src="../../<%= product.productID.productImage[0] %>" alt=""
                                                loading="lazy" class="image-fluid"></td>
                                        <td class="product-name-checkout">
                                            <%= product.productID.productName %>
                                        </td>
                                        <td>
                                            <%= product.productID.productBrand %>
                                        </td>
                                        <% if(product.productID.productDiscount===0){ %>
                                            <td>&#8377;
                                                <%= product.productID.productPrice %>
                                            </td>
                                            <% }else { %>
                                                <td>&#8377;
                                                    <%= Math.round(product.productID.productPrice-((product.productID.productDiscount/100)*product.productID.productPrice))
                                                        %>
                                                </td>
                                                <% }%>
                                                    <td>
                                                        <%= product.productID.productCategory %>
                                                    </td>
                                                    <td class="text-center">
                                                        <%= product.productCount %>
                                                    </td>
                                    </tr>
                                    <% }) %>
                            </table>


                        </div>
                    </div>
                </div>
            </div>
            <!-- end of third accordion -->

            <!-- Right -->
            <div class="col-lg-4">
                <div class="card top-0 border-1">
                    <div class="p-3 bg-light bg-opacity-10">
                        <h6 class="card-title mb-3">Payment Method</h6>
                        <div class="form-check mt-3">
                            <input class="form-check-input payment-method-cod" type="radio" name="paymentMethod"
                                id="payment-method-cod" value="0" />
                            <div class="form-check-label payment-flex" for="payment-method-cod">
                                <span class="">Cash On Delivery </span>
                                <label for="payment-method-cod" class="badge bg-danger" id="alert-for-COD">Available for
                                    below 1000 RS</label>
                            </div>
                        </div>
                        <!-- second radio -->
                        <div class="form-check mt-3 ">
                            <input class="form-check-input payment-method-cod" type="radio" name="paymentMethod"
                                id="payment-method-razorpay" value="1" />
                            <div class="form-check-label payment-flex" for="payment-method-razorpay">
                                <span>Razorpay</span>
                            </div>
                        </div>
                        <div class="form-check mt-3 ">
                            <input class="form-check-input payment-method-cod" type="radio" name="paymentMethod"
                                id="payment-method-wallet" value="2" />
                            <div class="form-check-label payment-flex" for="payment-method-wallet">
                                <span>Wallet</span>
                                <label for="payment-method-wallet" class=" text-success" role="alert">&#8377; <%= wallet
                                        %> available</label>
                                <input type="number" id="wallet-hidden" value="<%= wallet %>" hidden>
                            </div>
                        </div>
                    </div>
                </div>
                <div class="card top-0 border-1 mt-5">
                    <div class="p-3 bg-light bg-opacity-10">
                        <h6 class="card-title mb-3">Order Summary</h6>
                        <div class="d-flex justify-content-between mb-1 small">
                            <span>Subtotal</span> <span>&#8377;<%= (cartDetails.totalPrice).toLocaleString() %></span>
                        </div>
                        <div class="d-flex justify-content-between mb-1 small text-success">
                            <% if(cartDetails.payableAmount<500){ %>
                                <span>Savings</span> <span>&#8377;<%=
                                        (cartDetails.totalPrice-cartDetails.payableAmount+50).toLocaleString() %></span>
                                <% }else{ %>
                                    <span>Savings</span> <span>&#8377;<%=
                                            (cartDetails.totalPrice-cartDetails.payableAmount).toLocaleString() %>
                                    </span>
                                    <% } %>
                        </div>
                        <% if(cartDetails.payableAmount<500){ %>
                            <div class="d-flex justify-content-between mb-1 small ">
                                <span>Shipping</span> <span>&#8377;50</span>
                            </div>
                            <% }else{ %>
                                <div class="d-flex justify-content-between mb-1 small text-success">
                                    <span>Shipping</span> <span>Free</span>
                                </div>
                                <% } %>
                                    <hr>
                                    <div class="d-flex justify-content-between mb-4 small">
                                        <span>TOTAL</span> <strong class="text-dark">&#8377;<%=
                                                (cartDetails.payableAmount).toLocaleString() %></strong>
                                        <input type="text" id="hidden-total" value="<%= cartDetails.payableAmount %>"
                                            hidden>
                                    </div>
                                    <!-- <div class="form-check mb-1 small">
                                        <input class="form-check-input" type="checkbox" value="" id="tnc">
                                        <label class="form-check-label" for="tnc">
                                            I agree to the <a href="#">terms and conditions</a>
                                        </label>
                                    </div>
                                    <div class="form-check mb-3 small">
                                        <input class="form-check-input" type="checkbox" value="" id="subscribe">
                                        <label class="form-check-label" for="subscribe">
                                            Get emails about product updates and events. If you change your mind, you
                                            can
                                            unsubscribe at any time. <a href="#">Privacy Policy</a>
                                        </label>
                                    </div> -->
                                    <form action="" method="post" id="place-order-form">

                                        <button type="submit" class="btn btn-success w-100 mt-2"
                                            data-amount="<%=cartDetails.payableAmount%>"
                                            data-username="<%= user.name %>" data-mail="<%= user.email %>"
                                            data-phone="<%= user.phone %>" id="place-order-btn">Place
                                            order</button>
                                    </form>
                                    <a href="/cart" class="btn btn-secondary w-100 mt-2">Go
                                        Back</a>
                    </div>
                </div>
            </div>
        </div>
    </div>


    <%- include('footer') %>
        <script src="https://checkout.razorpay.com/v1/checkout.js"></script>
        <script>

            // find the selected address based on the index of stored address
            const addressCount = document.querySelectorAll('.checkout-address')
            let addressIndex
            addressCount.forEach((ele) => {
                ele.addEventListener('change', (e) => {
                    e.preventDefault()
                    addressIndex = parseInt(ele.value)
                })
            })

            // find the payment method 
            const paymentMethod = document.querySelectorAll('.payment-method-cod')
            let paymentMode
            paymentMethod.forEach((ele) => {
                ele.addEventListener('change', (e) => {
                    e.preventDefault()
                    paymentMode = parseInt(ele.value)
                })
            })




            //order placement using fetch
            // onclick event for place order button
            const orderPlacementBtn = document.getElementById('place-order-btn')
            orderPlacementBtn.addEventListener('click', (e) => {
                e.preventDefault()

                let validated = true
                // validation for selected address 
                if (addressIndex < 0 || addressIndex >= 4 || addressIndex === undefined) {
                    validated = false
                    Swal.fire({
                        icon: "warning",
                        title: "Invalid Delivery Address",
                        text: "Please selected a valid address",
                    })
                }

                // validation for payment method
                if (paymentMode === undefined) {
                    validated = false
                    Swal.fire({
                        icon: "warning",
                        title: "Invalid Payment method",
                        text: "Please selected a payment method",
                    })
                }


                // check if wallet is selected and wallet balance is sufficient for the order
                if (paymentMode === 2) {
                    const walletBalance = document.getElementById('wallet-hidden').value
                    if (Number(walletBalance) < Number(totalPayableAmount)) {
                        validated = false
                        Swal.fire({
                            icon: "warning",
                            title: "Insufficient Balance ",
                            text: `Wallet only have ${walletBalance} Rs available`,
                        })
                    }
                }


                // data from the button
                const totalAmount = orderPlacementBtn.getAttribute('data-amount')
                const username = orderPlacementBtn.getAttribute('data-username')
                const email = orderPlacementBtn.getAttribute('data-email')
                const phone = orderPlacementBtn.getAttribute('data-phone')

                // if the user select the payment as razor pay and a valid address
                if (validated && paymentMode === 1) {
                    const URL = `/payment-render/${totalAmount}`;

                    // fetch for order placement 
                    fetch(URL, {
                        method: "POST",
                        headers: {
                            "Content-Type": "application/json"
                        }
                    }).then((res) => {
                        if (!res.ok) {
                            throw new Error("Cannot render the payment page");
                        }
                        return res.json();
                    }).then((data) => {
                        if (data.orderID) {
                            const options = {
                                "key": "rzp_test_7sxqZBOSt6LOIS",
                                "amount": totalAmount * 100,
                                "currency": "INR",
                                "name": "CLEAT CRAFT",
                                "order_id": data.orderID,
                                "handler": function (response) {
                                    const URL="/place-order"
                                    fetch(URL,{
                                        method:"POST",
                                        headers:{
                                            'Content-Type':"application/json"
                                        },
                                        body:JSON.stringify({addressIndex,paymentMode})
                                    }).then((res)=>{
                                        return res.json()
                                    }).then((data)=>{
                                        if(data.success){
                                            window.location.href="/confirm-order"
                                        }
                                    }).catch((err)=>{
                                        console.error("Error on razor pay payment callback",err);
                                    })

                                   

                                },
                                "prefill": {
                                    "name": username,
                                    "email": email,
                                    "contact": phone
                                },
                                "notes": {
                                    "address": "Razorpay Corporate Office"
                                },
                                "theme": {
                                    "color": "#6351CE"
                                },
                                // "modal": {
                                //     "ondismiss": function () {
                                //         console.log("failed");
                                //         window.location.href = `/failed-payment`
                                //     }
                                // }

                            };

                            const rzp1 = new Razorpay(options);
                            rzp1.on('payment.failed', function (response) {
                                window.location.href = `/pending-order`
                            });
                            rzp1.open();
                            e.preventDefault()


                        } else {
                            throw new Error("Order ID not received");
                        }
                    }).catch((error) => {
                        Swal.fire({
                            icon: "error",
                            title: "Error on loading payment method",
                            text: error
                        })
                        console.error("Error during payment initiation:", error);
                    });
                }
                // end of place order through razor pay


                const orderPlacementForm = document.getElementById('place-order-form')
                // if the user select the payment as cash on delivery
                if (validated && paymentMode === 0) {
                    const URL = `/place-order/${addressIndex}/${paymentMode}`
                    orderPlacementForm.action = URL
                    orderPlacementForm.submit()
                }



                // end of fetch for order placing using cash on delivery
                // if the user select the payment as cash on delivery
                if (validated && paymentMode === 2) {
                    const URL = `/place-order/${addressIndex}/${paymentMode}`
                    orderPlacementForm.action = URL
                    orderPlacementForm.submit()
                }
                // end of fetch for order placing using cash on delivery

            })
            // end of onclick event of order button

            // delete address
            function deleteAddress(index) {
                const URL = `/delete-address/${index}`

                Swal.fire({
                    icon: "question",
                    title: "Delete Address",
                    text: "Are you sure want to delete the address?",
                    showCancelButton: true
                }).then((result) => {
                    if (result.isConfirmed) {
                        fetch(URL, {
                            method: "DELETE",
                        }).then((Response) => {
                            if (Response.ok) {
                                Swal.fire({
                                    icon: "success",
                                    title: "Address deleted",
                                    showConfirmButton: false,
                                    timer: 700,
                                }).then(() => {
                                    // const addressElement = document.getElementById(`address-${index}`);
                                    // if (addressElement) {
                                    //     addressElement.remove();
                                    // }
                                    window.location.reload()
                                })

                            }
                        })
                    }
                })
            }


            // get the address details on the modal


            // validation for adding address 
            const addressForm = document.getElementById('add-address-form')
            const contactName = document.getElementsByName('name')[0]
            const pincode = document.getElementsByName('pincode')[0]
            const homeAddress = document.getElementsByName('addressHome')[0]
            const areaAddress = document.getElementsByName('addressArea')[0]
            const landmark = document.getElementsByName('addressLandmark')[0]

            // validation for adding new address
            addressForm.addEventListener('submit', (e) => {
                e.preventDefault();

                document.getElementsByClassName('validate-user-address')[0].innerHTML = ""
                document.getElementsByClassName('validate-user-address')[1].innerHTML = ""
                document.getElementsByClassName('validate-user-address')[2].innerHTML = ""
                document.getElementsByClassName('validate-user-address')[3].innerHTML = ""
                document.getElementsByClassName('validate-user-address')[4].innerHTML = ""

                let isvalid = true;
                let validateMessage = ""
                const userNameRegex = /^[a-zA-Z\s]+$/;

                // check name is empty and it's only having number
                if (contactName.value.trim() === "" || !userNameRegex.test(contactName.value)) {
                    isvalid = false
                    document.getElementsByClassName('validate-user-address')[0].innerHTML = "Enter a valid name"
                }
                // check pincode
                if (pincode.value.length > 6 || isNaN(pincode.value) || pincode.value.length <= 0) {
                    isvalid = false
                    document.getElementsByClassName('validate-user-address')[1].innerHTML = "Enter a valid Pincode with six digits"
                }
                // validate home address
                if (homeAddress.value.length > 100 || homeAddress.value.length < 20 || !isNaN(homeAddress.value)) {
                    isvalid = false
                    document.getElementsByClassName('validate-user-address')[2].innerHTML = "Enter a valid home address between 20 and 100 characters"
                }
                // validate area address
                if (areaAddress.value.length > 100 || areaAddress.value.length < 10 || !isNaN(areaAddress.value)) {
                    isvalid = false
                    document.getElementsByClassName('validate-user-address')[3].innerHTML = "Enter a valid area address between 10 and 100 characters"
                }
                // validate landmark
                if (landmark.value.length > 50 || !isNaN(landmark.value)) {
                    isvalid = false
                    document.getElementsByClassName('validate-user-address')[4].innerHTML = "Enter a valid landmark with maximum 50 characters"
                }

                // if form is valid then the form is submitted
                if (isvalid) {

                    addressForm.submit()
                }
            })

            // edit address- add selected address field on the edit address form field
            const editAddressForm = document.getElementById('edit-address-form')
            const contactNameEdit = document.getElementsByName('name')[1]
            const pincodeEdit = document.getElementsByName('pincode')[1]
            const homeAddressEdit = document.getElementsByName('addressHome')[1]
            const areaAddressEdit = document.getElementsByName('addressArea')[1]
            const landmarkEdit = document.getElementsByName('addressLandmark')[1]
            const addressIndexEdit = document.getElementsByName('addressIndex')[0]


            document.querySelectorAll('#edit-address-button').forEach((button) => {
                button.addEventListener('click', (e) => {


                    document.getElementsByClassName('validate-user-address')[5].innerHTML = ""
                    document.getElementsByClassName('validate-user-address')[6].innerHTML = ""
                    document.getElementsByClassName('validate-user-address')[7].innerHTML = ""
                    document.getElementsByClassName('validate-user-address')[8].innerHTML = ""
                    document.getElementsByClassName('validate-user-address')[9].innerHTML = ""

                    // Get the address data from the data-address attribute
                    let addressDataString = button.getAttribute('data-address');
                    let addressIndex = button.getAttribute('data-index');


                    // Convert the object-like string to a valid JSON string
                    addressDataString = addressDataString
                        .replace(/'/g, '"') // Replace single quotes with double quotes
                        .replace(/(\w+):/g, '"$1":'); // Add double quotes around keys

                    // Parse the JSON string to an object
                    const addressData = JSON.parse(addressDataString);

                    contactNameEdit.value = addressData.contactName;
                    pincodeEdit.value = addressData.pincode;
                    homeAddressEdit.value = addressData.homeAddress;
                    areaAddressEdit.value = addressData.areaAddress;
                    landmarkEdit.value = addressData.landmark;
                    addressIndexEdit.value = parseInt(addressIndex)

                    // change the edit address form action
                    editAddressForm.setAttribute('action', `/edit-address-checkout/${parseInt(addressIndex)}`)
                });
            });



            // validation for adding new address
            editAddressForm.addEventListener('submit', (e) => {
                e.preventDefault();

                document.getElementsByClassName('validate-user-address')[5].innerHTML = ""
                document.getElementsByClassName('validate-user-address')[6].innerHTML = ""
                document.getElementsByClassName('validate-user-address')[7].innerHTML = ""
                document.getElementsByClassName('validate-user-address')[8].innerHTML = ""
                document.getElementsByClassName('validate-user-address')[9].innerHTML = ""

                let isvalid = true;
                let validateMessage = ""
                const userNameRegex = /^[a-zA-Z\s]+$/;

                // check name is empty and it's only having number
                if (contactNameEdit.value.trim() === "" || !userNameRegex.test(contactNameEdit.value)) {
                    isvalid = false
                    document.getElementsByClassName('validate-user-address')[5].innerHTML = "Enter a valid name"
                }
                // check pincode
                if (pincodeEdit.value.length > 6 || isNaN(pincodeEdit.value) || pincodeEdit.value.length <= 0) {
                    isvalid = false
                    document.getElementsByClassName('validate-user-address')[6].innerHTML = "Enter a valid Pincode with six digits"
                }
                // validate home address
                if (homeAddressEdit.value.length > 100 || homeAddressEdit.value.length < 20 || !isNaN(homeAddressEdit.value)) {
                    isvalid = false
                    document.getElementsByClassName('validate-user-address')[7].innerHTML = "Enter a valid home address between 20 and 100 characters"
                }
                // validate area address
                if (areaAddressEdit.value.length > 100 || areaAddressEdit.value.length < 10 || !isNaN(areaAddressEdit.value)) {
                    isvalid = false
                    document.getElementsByClassName('validate-user-address')[8].innerHTML = "Enter a valid area address between 10 and 100 characters"
                }
                // validate landmark
                if (landmarkEdit.value.length > 50 || !isNaN(landmarkEdit.value)) {
                    isvalid = false
                    document.getElementsByClassName('validate-user-address')[9].innerHTML = "Enter a valid landmark with maximum 50 characters"
                }

                // if form is valid then the form is submitted
                if (isvalid) {

                    editAddressForm.submit()
                }
            })



            // cash on delivery only for order below 1000rs

            const totalPayableAmount = document.getElementById('hidden-total').value
            if (Number(totalPayableAmount) > 1000) {
                document.getElementById('payment-method-cod').disabled = true
                document.getElementById('alert-for-COD').style.display = "block"
            }






        </script>